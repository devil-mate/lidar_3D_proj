<?xml version="1.0"?>
<launch>

    <arg name="id_robot" default="robot"/>
    <arg name="prefix" default="$(arg id_robot)_"/>
    <arg name="x_init_pose" default="0"/>
    <arg name="y_init_pose" default="0"/>
    <arg name="z_init_pose" default="0"/>
    <arg name="xacro_robot" default="summit_xl_std.urdf.xacro"/>
    <arg name="launch_amcl_and_mapserver" default="false"/>
    <arg name="launch_gmapping" default="false"/>
    <arg name="launch_move_base" default="false"/>
    <arg name="map_file" default="empty/empty.yaml"/>
    <arg name="robot_localization_mode" default="odom"/>
    <arg name="movebase_local_planner" default="teb"/>
    <!-- odom, complete (including gps)-->
    <arg name="diff_drive" default="true"/>
    <arg if="$(arg diff_drive)" name="omni_drive" value="false"/>
    <arg unless="$(arg diff_drive)" name="omni_drive" value="true"/>
    <arg name="ros_planar_move_plugin" default="false"/>
    <arg name="launch_pad" default="false"/>
    <arg name="use_gpu_for_simulation" default="false"/><!-- use_gpu_for_simulation -->
    <arg name="has_pantilt_camera" default="false"/>
    <!-- arm robot -->
    <arg name="launch_arm" default="false"/>
    <arg name="launch_moveit_movegroup" default="false"/>
    <arg name="kinova_arm" default="j2s7s300"/>
    <arg name="kinova_arm_is7dof" default="true"/>
    <arg name="arm_prefix" default="$(arg prefix)$(arg kinova_arm)"/>

    <!-- only for advanced simulation -->
    <arg name="launch_advanced_simulation" default="false"/> <!-- one flag activates all -->
    <arg name="launch_base_hw_sim" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_battery_estimator" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_perception" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_navigation" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_rlc_rostful" default="$(arg launch_advanced_simulation)"/>
    <arg name="launch_hmi" default="$(arg launch_advanced_simulation)"/>
    <arg name="rlc_rostful_host" default="localhost"/>
    <arg name="rlc_rostful_port" default="8080"/>
    <arg name="merge_lasers" default="$(arg launch_advanced_simulation)"/>
    <arg name="merge_laser_topics" default="front_laser/scan rear_laser/scan"/>


    <!-- BEGIN ROBOT-->
    <group ns="$(arg id_robot)">

        <!-- Load the URDF into the ROS Parameter Server -->
        <param name="robot_description" command="$(find xacro)/xacro '$(find summit_xl_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg ros_planar_move_plugin) omni_wheels:=$(arg omni_drive) gpu:=$(arg use_gpu_for_simulation) --inorder"/>

        <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
            <remap from="/joint_states" to="joint_states" />
        </node>

        <!-- Spawner model into gazebo -->
        <node name="urdf_spawner_summit_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
          args="-x $(arg x_init_pose)
                -y $(arg y_init_pose)
                -z $(arg z_init_pose)
                -J $(arg arm_prefix)_joint_1 0.0
                -J $(arg arm_prefix)_joint_2 2.9
                -J $(arg arm_prefix)_joint_3 0.0
                -J $(arg arm_prefix)_joint_4 1.3
                -J $(arg arm_prefix)_joint_5 -2.07
                -J $(arg arm_prefix)_joint_6 1.4
                -J $(arg arm_prefix)_joint_7 0.0
                -J $(arg arm_prefix)_joint_finger_1 1.0
                -J $(arg arm_prefix)_joint_finger_2 1.0
                -J $(arg arm_prefix)_joint_finger_3 1.0
                -urdf
                -param robot_description
                -model $(arg id_robot)
                -unpause" />

        <!-- start summit_xl_control nodes -->
        <include file="$(find summit_xl_control)/launch/summit_xl_control.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="sim" value="true"/>

            <arg if="$(arg omni_drive)" name="kinematics" value="omni"/>
            <arg unless="$(arg omni_drive)" name="kinematics" value="skid"/>

            <arg name="ros_planar_move_plugin" value="$(arg ros_planar_move_plugin)"/>
            <arg name="sim_arm_control" value="$(arg launch_arm)"/>
            <arg name="launch_pantilt_camera_controller" value="$(arg has_pantilt_camera)"/>

            <arg name="kinova_arm" value="$(arg kinova_arm)"/>
            <arg name="is7dof" value="$(arg kinova_arm_is7dof)"/>
            <arg name="arm_prefix" value="$(arg arm_prefix)"/>
        </include>

        <!-- pad -->
        <include  if="$(arg launch_pad)" file="$(find summit_xl_pad)/launch/summit_xl_pad.launch"/>

        <!-- base_hw_sim -->
        <include if="$(arg launch_base_hw_sim)" file="$(find robotnik_base_hw_sim)/launch/summit_xl_hw_sim.launch">
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <group if="$(arg launch_battery_estimator)">
            <!-- start dock_manager node -->
            <include file="$(find charge_manager)/launch/charge_manager.launch">
                <arg name="docker_mode" value="manual_sw"/>
                <arg name="inverted_contact_relay_input" value="false"/>
                <arg name="contact_relay_input_number" value="2"/>
                <arg name="charger_relay_output_number" value="1"/>
            </include>

            <!-- start battery_estimation node -->
            <include file="$(find battery_estimation)/launch/table_battery.launch">
                <arg name="battery_voltage" value="48"/>
                <arg name="read_voltage_from_analog_input" value="true"/>
                <arg name="voltage_analog_input_number" value="1" />
                <arg name="current_analog_input_number" value="2" />
            </include>

        </group>

        <!-- amcl and map server base-->
        <include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/map_server.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="map_file" value="$(arg map_file)"/>
        </include>
        <include if="$(arg launch_amcl_and_mapserver)" file="$(find summit_xl_localization)/launch/amcl.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg if="$(arg omni_drive)" name="odom_model_type" value="omni"/>
            <arg unless="$(arg omni_drive)" name="odom_model_type" value="diff"/>
            <arg name="x_init_pose" value="$(arg x_init_pose)"/>
            <arg name="y_init_pose" value="$(arg y_init_pose)"/>
            <arg name="z_init_pose" value="$(arg z_init_pose)"/>
        </include>

        <!-- move base -->
        <include if="$(arg launch_move_base)" file="$(find summit_xl_navigation)/launch/move_base.launch">
            <arg name="prefix" value="$(arg prefix)"/>
            <arg name="local_planner" value="$(arg movebase_local_planner)"/>
            <arg name="differential_robot" value="$(arg diff_drive)"/>
        </include>

        <!-- gmapping -->
        <include if="$(arg launch_gmapping)" file="$(find summit_xl_localization)/launch/slam_gmapping.launch">
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <!-- merge lasers -->
        <include if="$(arg merge_lasers)" file="$(find summit_xl_bringup)/launch/merge_laser.launch">
            <arg name="laserscan_topics" value="$(arg merge_laser_topics)"/>
            <arg name="prefix" value="$(arg prefix)"/>
        </include>

        <!-- joint trajectory action server -->
        <group if="$(arg launch_arm)">
            <param name="/$(arg arm_prefix)_driver/robot_type" value="$(arg kinova_arm)" />
            <node name="$(arg kinova_arm)_joint_trajectory_action_server" pkg="kinova_driver" type="joint_trajectory_action_server" output="screen" respawn="false" args="$(arg arm_prefix)">
                <!-- publications to the arm control -->
                <remap from="/$(arg arm_prefix)_driver/trajectory_controller/command" to="effort_joint_trajectory_controller/command" />
                <remap from="/$(arg arm_prefix)_driver/trajectory_controller/state" to="effort_joint_trajectory_controller/state" />
                <!-- subscriptions to the move_group -->
                <remap from="/$(arg arm_prefix)/follow_joint_trajectory/cancel" to="$(arg kinova_arm)_arm_controller/follow_joint_trajectory/cancel" />
                <remap from="/$(arg arm_prefix)/follow_joint_trajectory/feedback" to="$(arg kinova_arm)_arm_controller/follow_joint_trajectory/feedback" />
                <remap from="/$(arg arm_prefix)/follow_joint_trajectory/goal" to="$(arg kinova_arm)_arm_controller/follow_joint_trajectory/goal" />
                <remap from="/$(arg arm_prefix)/follow_joint_trajectory/result" to="$(arg kinova_arm)_arm_controller/follow_joint_trajectory/result" />
                <remap from="/$(arg arm_prefix)/follow_joint_trajectory/status" to="$(arg kinova_arm)_arm_controller/follow_joint_trajectory/status" />
            </node>

            <node name="$(arg kinova_arm)_gripper_command_action_server" pkg="kinova_driver" type="gripper_command_action_server" output="screen" respawn="false" args="$(arg arm_prefix)">
                <!-- publications to the gripper control -->
                <remap from="/$(arg arm_prefix)_driver/fingers_action/finger_positions/cancel" to="$(arg kinova_arm)_controller/fingers_action/finger_positions/cancel" />
                <remap from="/$(arg arm_prefix)_driver/fingers_action/finger_positions/feedback" to="$(arg kinova_arm)_controller/fingers_action/finger_positions/feedback" />
                <remap from="/$(arg arm_prefix)_driver/fingers_action/finger_positions/goal" to="$(arg kinova_arm)_controller/fingers_action/finger_positions/goal" />
                <remap from="/$(arg arm_prefix)_driver/fingers_action/finger_positions/result" to="$(arg kinova_arm)_controller/fingers_action/finger_positions/result" />
                <remap from="/$(arg arm_prefix)_driver/fingers_action/finger_positions/status" to="$(arg kinova_arm)_controller/fingers_action/finger_positions/status" />
                <remap from="/$(arg arm_prefix)_driver/out/finger_position" to="$(arg kinova_arm)_controller/out/finger_position" />
                <!-- subscriptions to the move_group -->
                <remap from="/$(arg arm_prefix)_gripper/gripper_command/feedback" to="$(arg kinova_arm)_gripper_controller/gripper_command/feedback" />
                <remap from="/$(arg arm_prefix)_gripper/gripper_command/result" to="$(arg kinova_arm)_gripper_controller/gripper_command/result" />
                <remap from="/$(arg arm_prefix)_gripper/gripper_command/status" to="$(arg kinova_arm)_gripper_controller/gripper_command/status" />
                <remap from="/$(arg arm_prefix)_gripper/gripper_command/cancel" to="$(arg kinova_arm)_gripper_controller/gripper_command/cancel" />
                <remap from="/$(arg arm_prefix)_gripper/gripper_command/goal" to="$(arg kinova_arm)_gripper_controller/gripper_command/goal" />
            </node>
        </group>
        <!-- MoveGroup Moveit! -->
        <arg name="moveit_package" value="summit_xl_$(arg kinova_arm)_moveit_config"/>
        <arg name="moveit_launch_file" value="launch/summit_xl_$(arg kinova_arm)_moveit_config.launch"/>
        <include if="$(arg launch_moveit_movegroup)" file="$(eval find(moveit_package)+'/'+moveit_launch_file)">
        </include>

    </group>

    <include if="$(arg launch_perception)" file="$(find summit_xl_perception)/launch/perception_complete.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="run_reflector_locator" value="true"/>
        <arg name="run_ar_locator" value="true"/>
    </include>

    <include if="$(arg launch_navigation)" file="$(find summit_xl_navigation)/launch/navigation_complete.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="has_docker" value="true"/>
        <arg name="run_laser_docker" value="true"/>
    </include>

    <group if="$(arg launch_rlc)">
        <!-- start dock_manager node -->
        <include file="$(find summit_xl_robot_local_control)/launch/robot_local_control.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
        </include>

        <!-- start battery_estimation node -->
        <include if="$(arg launch_rlc_rostful)" file="$(find summit_xl_robot_local_control)/launch/rostful_server.launch">
            <arg name="id_robot" value="$(arg id_robot)"/>
            <arg name="host" value="$(arg rlc_rostful_host)"/>
            <arg name="port" value="$(arg rlc_rostful_port)"/>
        </include>

    </group>

    <include if="$(arg launch_hmi)" file="$(find robotnik_hmi)/launch/robotnik_hmi.launch">
        <arg name="id_robot" value="$(arg id_robot)"/>
        <arg name="launch_system_monitor" value="false"/>
    </include>


</launch>
